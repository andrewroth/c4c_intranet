<?php

class ListIterator {

    /** @var [OBJECT] The ReadOnlyResultSet obj returned from the RowManager. */
	protected $resultSet;
	
	/** The XML Root Node Name for this list of info. */
    protected $xmlNodeName;
    
    protected $searchManager;
	protected $searchClassName;

    function __construct( $searchManager, $searchClassName='' ) 
    {
        $this->searchManager = $searchManager;
        $this->searchClassName = $searchClassName;
        
        // set up the RowManager type that is used
        // in the getNext and XML methods
        if ( $this->searchClassName == '' )
        {
            // default to the searchManager that was passed in
            $this->searchClassName = get_class($this->searchManager);
            // echo 'searchClassName['.$this->searchClassName.']<br/>';
        }
        
        $this->xmlNodeName = get_class($this);
        // echo 'xmlNodeName['.$this->xmlNodeName.']<br/>';

        $this->resultSet = $this->searchManager->find();
        
        return;
    }
    
    //************************************************************************
	/**
	 * function setFirst
	 * <pre>
	 * Sets the list pointer to the first object.
	 * </pre>
	 * @return [void]
	 */
    function setFirst() 
    {
        $this->resultSet->setFirst();
    }  // end classMethod()
    
    //************************************************************************
	/**
	 * function getNext
	 * <pre>
	 * Returns next object in the list.
	 * </pre>
	 * @return [OBJECT] if exists, FALSE otherwise
	 */
    function getNext() 
    {   
        return $this->resultSet->getNext( new $this->searchClassName() );
    }  // end classMethod()
    
    //************************************************************************
	/**
	 * function moveNext
	 * <pre>
	 * Points to the next entry in the result set.
	 * </pre>
	 * @return [BOOL] True if exists, FALSE otherwise
	 */
    function moveNext() 
    {
        return $this->resultSet->moveNext();
    }
    
    //************************************************************************
	/**
	 * function getCurrent
	 * <pre>
	 * Returns current rowManager object in the list.
	 * </pre>
	 * @return [OBJECT] if exists, FALSE otherwise
	 */
    function getCurrent( $rowManager ) 
    {
        return $this->resultSet->getCurrent( $rowManager );
    }
    
    
    
    //************************************************************************
	/**
	 * function getDropListArray
	 * <pre>
	 * Returns the list Objects in an array (used by form templates for drop
	 * lists).
	 * </pre>
	 * @param $labels [OBJECT] a multilingual label object for converting 
	 * label into the current language.
	 * @return [ARRAY]
	 */
    function getDropListArray( $labels=null ) 
    {
        // create an empty array to fill out
        $resultArray = array();
        
        // for each item in the list
        $this->setFirst();
        while( $item = $this->getNext() ) {
        
            // if a label object provided then 
            if ( $labels ) {
            
                // translate item label
                $currentLabel = $labels->getLabel( '['.$item->getLabel().']');
                $resultArray[ $item->getID() ] = $currentLabel;
                
            } else {
            // else 
                // store item label as is
                $resultArray[ $item->getID() ] = $item->getLabel();
            }
        }
        
        // return result array 
        return $resultArray;
        
    }  // end getDropListArray()
    
    //************************************************************************
	/** 
	 * function getXML
	 *
	 * Generates an XML document from the list of applicants.
	 *
	 * @param $isHeaderIncluded [BOOL] Determines if we include the '<?xml version="1.0"?>' header.
	 * @param $rootNodeName [STRING] The XML root node name.
	 *
	 * @return [STRING] Returns an XML formatted string.
	 */
	function getXML( $isHeaderIncluded=true, $rootNodeName='' ) 
	{
        if ( $rootNodeName == '' )
        {
           $rootNodeName = $this->xmlNodeName;
        }
        
        $xmlObject = new XMLObject( $rootNodeName);
        
        $this->resultSet->setFirst();
        while( $item = $this->resultSet->getNext( new $this->searchClassName() ) ) {
        
            $xmlObject->addXMLObject( $item->getXMLObject() );
        }// end while
        
        return $xmlObject->getXML( $isHeaderIncluded );
	
	} // end getXML()

}

?>