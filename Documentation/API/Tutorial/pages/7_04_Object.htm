<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><!-- InstanceBegin template="/Templates/documentation_tutorialContent.dwt.php" codeOutsideHTMLIsLocked="false" -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<!-- InstanceBeginEditable name="doctitle" -->
<title>Untitled Document</title>
<!-- InstanceEndEditable --><link href="../../../Data/CSS/documentation.css" rel="stylesheet" type="text/css">
<!-- InstanceBeginEditable name="head" --><!-- InstanceEndEditable -->
</head>

<body>
<center>
<table width="680" border="0" cellspacing="0" cellpadding="0">
    <tr>
        <td><table width="100%"  border="0" cellspacing="0" cellpadding="0">
    <tr>
        <td><img src="../../../Images/page_header.gif"></td>
		<td width="200">&nbsp;</td>
    </tr>
    <tr>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
    </tr>
</table>
</td>
    </tr>
    <tr>
        <td bgcolor="#CCCCCC">&nbsp;</td>
    </tr>
    <tr>
        <td class="text_navbar"><? 
			/*
			 * Find the path to the Documentation Root ...
			 */
			$pathToRoot = ''; 
			for ( $indx=0; $indx<20 && !file_exists( $pathToRoot.'Data/CSS/documentation.css'); $indx++ ) {
				$pathToRoot .= '../';
			}

		echo '<a href="'.$pathToRoot.'index.php" target="_top">AI Doc</a> &gt; <a href="'.$pathToRoot.'/API/index.html">API</a>';
			
		?><!-- InstanceBeginEditable name="NavBar" --><a href="intro.htm">Tutorial</a> &gt; <a href="7_00_PageController.htm">AppController
            Objects</a> &gt; The Object <!-- InstanceEndEditable --></td>
    </tr>
	<tr><td>&nbsp;</td></tr>
    <tr>
        <td><table width="100%"  border="0" cellspacing="0" cellpadding="0">
    <tr>
        <td class="content_text"><!-- InstanceBeginEditable name="prevButtonTop" --><a href="7_03_Transitions.htm">Previous</a><!-- InstanceEndEditable --></td>
        <td class="content_text"><div align="right"><!-- InstanceBeginEditable name="nextButtonTop" --><a href="#">Next</a><!-- InstanceEndEditable --></div></td>
    </tr>
</table>
</td>
    </tr>
    <tr>
        <td class="content_text" ><hr size="1" noshade >
            <!-- InstanceBeginEditable name="Content" -->
		<h1>AppController Objects
                - The Object </h1>
		<p class="content_text" >Now, it is time to make things intersting. Let's take
		    this controller script and make it an Object.</p>
		<p class="content_text" >Copy the attached files to your testing directory.
		    Be sure to copy the attached templates over the templates you have
		    stored in your testingDirectory/templates/ folder. </p>
		<p class="content_text" >Now run the ex_tvAddicts_obj.php script in your browser. </p>
		<p class="content_text" >Notice how the pages display with a site defined template
		    now ... cool, huh?</p>
		<p class="content_text" >Let's take a look at the changes:</p>
		<p class="content_text" ><em><strong>ex_tvAddicts_obj.php:</strong></em></p>
		<p class="content_text" >This file now drives the application. All it does
		    is load all the necessary info required by your new application controller
		    object, and drive it through the load, process, display phases. Don't
		    worry about understanding everything in the script. The important
		    pieces of code for this example are as follows:</p>
		<span class="sourcecodebox" ><pre>
// Create new AppController Object
$application = new moduleTVAddicts( $db, $viewer, $labels );

// "Drive" the PageContent Object through it's loadData(), processData(), and 
// prepareDisplayData() functions.
$application->loadData();
$application->processData();
$application->prepareDisplayData();

// Get the content data back in Array format
$pageData = $application->getPageContent();	
</pre></span>
		<p class="content_text" >A new AppController object is created, each of the
		    load, process, display methods are called, and finally the data to
		    display are retrieved from it.</p>
			<span class="sourcecodebox" ><pre>
// Now get the Template requested by the PageContent object
$template = new Template( $extension );

// Set PageContent information using the setXML() method.
$template->set( 'page', $pageData);

// Get Template HTML
// display HTML
echo $template->fetch( $application->getPageTemplate() );
</pre></span>
		<p class="content_text" >Notice how the controller script, now creates a new
		    template, and takes the data received from the AppController obj
		    and sends it to a template specified by the AppController. The AppController
		    defaults to one of the site templates. This is what you are seeing
		    when you run the script.</p>
		<p class="content_text" >&nbsp;</p>
		<p class="content_text" ><em><strong>page_SeriesEdit.tpl:<br>
		    page_SeriesList.tpl:</strong></em></p>
		<p class="content_text" >These templates now only return the HTML for the portion
		    of the page they are responsible for. We removed all the opening
		    HTML tags and are depending on the site template for that.</p>
		<p class="content_text" >Also, we added in a hidden field in your <em>page_SeriesEdit.tpl</em>		    form, to mark when a form has been submitted. </p>
		<p class="content_text" >&nbsp;</p>
		<p class="content_text" ><em><strong>app_tvAddicts.php:</strong></em></p>
		<p class="content_text" >This is your AppController. It's job is to decide
		    which page is to be displayed and processed at a time. </p>
		<p class="content_text" >&nbsp;</p>
		<span class="sourcecodebox" ><pre>
/**
 * @package TVAddicts
 * class moduleTVAddicts
 * discussion &lt;pre>
 * Written By	:	Johnny Hausman
 * Date		:   2006 Jan 21
 * 
 * This is the application controller for the TV Addicts application. It's
 * job is to decide which page is to be displayed and guide those pages 
 * through the load, process, display phases.
 * 
 * &lt;/pre>	
 */
 class moduleTVAddicts extends AppController {
</pre></span>
		<p class="content_text" >Your AppController extends the site wide AppController
		    object.</p>
		<p class="content_text" >&nbsp;</p>
		<span class="sourcecodebox" ><pre>
// 		
//
//	CONSTANTS:
        
    /** const PAGE    The QueryString Page parameter. */
        const PAGE = "P";
        const PAGE_SERIESLIST = 'SL';
        const PAGE_SERIESEDIT = 'SE';
        
    /** const SERIES_ID    The QueryString variable marking which series to edit. */
        const SERIES_ID = "seriesID";
</pre></span>
		<p class="content_text" >You define the constants for the pages and any other
		    stateVariables you need. You'll notice that since these constants
		    are defined as part of your class, you have to reference them with
		    your className::ConstantName. These constants are now used through
		    this class. </p>
		<p class="content_text" >&nbsp;</p>
		<span class="sourcecodebox" ><pre>
	//************************************************************************
	/** 
	 * @function loadData
	 *
	 * @abstract Provided function to allow object to load it's data.
     *
	 */
	function loadData( ) 
	{
        // Load in the PageController's state variables
        $pageKey = moduleTVAddicts::PAGE;
        $page = $this->getQSValue( $pageKey, moduleTVAddicts::PAGE_SERIESLIST );
        $this->stateVariables[$pageKey] = $page;
        
        $seriesIDKey = moduleTVAddicts::SERIES_ID;
        $seriesID = $this->getQSValue( $seriesIDKey, '' );
        $this->stateVariables[$seriesIDKey] = $seriesID;
        
        
        
        // now descide which PageDisplay object to load
        switch( $page ) {
                 
            case moduleTVAddicts::PAGE_SERIESEDIT:
                $this->loadSeriesEdit();
                break;
        
        
            case moduleTVAddicts::PAGE_SERIESLIST: 
            default:
                $this->stateVariables[ $pageKey ] = moduleTVAddicts::PAGE_SERIESLIST;
                $this->loadSeriesList();
                break;
        }
        
        
        
        // Now call the parent loadData() to make sure any needed form data 
        // is loaded.
        parent::loadData();

	}
</pre></span>
		<p class="content_text" >loadData() is where we load all the data necessary
		    to work with this page. Notice the new member function <span class="sourcecodebox">getQSValue(
		    $queryStringParameter, $defaultValue )</span> used for retrieving the querystring
		    data. </p>
		<p class="content_text" >Also notice that at the end, the <span class="sourcecodebox">parent::loadData()</span>		    is called. This completes the loading of all your data and form data. </p>
		<p class="content_text" >&nbsp;</p>
		<span class="sourcecodebox" ><pre>
	//************************************************************************
	/** 
	 * @function processData
	 *
	 * @abstract Provided function to allow an object to process it's data.
	 *
	 */
	function processData( ) 
	{

        // if this was a form submit ... 
        // NOTE: our forms should have a hidden variable named Process on them.
        if ( $this->isFormSubmission() ) {
        
            // if form data is valid ...
            if ( $this->pageDisplay->isDataValid() ) {
            
                // process the data
                $this->pageDisplay->processData();
            
                // now switch to the proper next page ...
                switch( $this->stateVariables[ moduleTVAddicts::PAGE ] ) {
    
                    case moduleTVAddicts::PAGE_SERIESEDIT:
                        $this->loadSeriesList();
                        break;
                        
                 }
            
            } // end if data valid
        
        }  // end ifFormSubmission

	}</pre></span>
		<p class="content_text" >processData() is almost identical to the previous
		    logic. There is a new method <span class="sourcecodebox">isFormSubmission()</span> used for determining
		    if we have form data to process. </p>
		<p class="content_text" >&nbsp;</p>
		<span class="sourcecodebox" ><pre>
	//************************************************************************
	/** 
	 * @function prepareDisplayData
	 *
	 * @abstract Provided function to allow an object to prepare it's data 
	 * for displaying (actually done in the &lt;code>Page&lt;/code> Object).
     *
	 */
	function prepareDisplayData( ) 
	{
        $content = $this->pageDisplay->getHTML();

        // store HTML content as this page's content Item
        $this->addContent( $content );
	}</pre></span>
		<p class="content_text" >prepareDisplayData() handles the generation of the
		    HTML necessary for displaying your page. In this example, it simply
		    gets the HTML from your pageDisplay object, and stores it as the
		    Content for this page. </p>
		<p class="content_text" >&nbsp; </p>
		<h4>Notes:</h4>
		<p class="content_text" >For extra credit, you can open up the siteDirectory/objects/AppController.php
		    file and spend some time seeing how it works. Then take a look at
		    the siteDirectory/Data/templates/arry_siteTemplate.tpl file to see
		    how the data is pulled out of the page content data returned by the
		    AppController. </p>
		<p class="content_text" >Notice that there is no getCallBack() defined in your
		    AppController. It is included in the parent class now. </p>
		<h4>&nbsp;</h4>
		<span class="sourcecodebox" ></span>
		<h4>Links To Code Examples</h4>
		<table width="100%"  border="0" cellspacing="0" cellpadding="0">
            <tr>
                <td><a href="../7%20PageController/ex_tvAddicts_obj.php"><img src="../../../Images/icn_filePHP.gif" width="24" height="31" border="0"></a></td>
                <td><a href="../7%20PageController/app_tvAddicts.php"><img src="../../../Images/icn_filePHP.gif" width="24" height="31" border="0"></a></td>
				<td><a href="../7%20PageController/page_SeriesEdit.tpl"><img src="../../../Images/icn_filePHP.gif" width="24" height="31" border="0"></a></td>
				<td><a href="../7%20PageController/page_SeriesList.tpl"><img src="../../../Images/icn_filePHP.gif" width="24" height="31" border="0"></a></td>
            </tr>
            <tr>
                <td><a href="../7%20PageController/ex_tvAddicts_obj.php">ex_tvAddicts_obj.php</a></td>
                <td><a href="../7%20PageController/app_tvAddicts.php">app_tvAddicts.php</a></td>
				<td><a href="../7%20PageController/page_SeriesEdit.tpl">page_SeriesEdit.tpl</a></td>
				<td><a href="../7%20PageController/page_SeriesList.tpl">page_SeriesList.tpl</a></td>
            </tr>
        </table>
		<p class="content_text" >&nbsp;</p>
            <!-- InstanceEndEditable -->
            <hr size="1" noshade>
		 </td>
    </tr>
	<tr><td><table width="100%"  border="0" cellspacing="0" cellpadding="0">
    <tr>
        <td class="content_text"><!-- InstanceBeginEditable name="prevButtonBottom" --><a href="7_03_Transitions.htm">Previous</a><!-- InstanceEndEditable --></td>
        <td class="content_text"><div align="right"><!-- InstanceBeginEditable name="nextButtonBottom" --><a href="#">Next</a><!-- InstanceEndEditable --></div></td>
    </tr>
</table></td>
	</tr>
</table>
</center>

</body>
<!-- InstanceEnd --></html>
