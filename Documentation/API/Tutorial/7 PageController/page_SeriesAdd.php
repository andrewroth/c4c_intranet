<?php
/**
 * class page_SeriesAdd 
 * <pre> 
 * Displays the Add Series page in our tvaddicts application
 * </pre>
 * @author Johnny Hausman
 * Date:   24 Jan 2006
 */
class  page_SeriesAdd {

	//CONSTANTS:
	
	/** The list of fields to be displayed */
    const FORM_FIELDS = 'series_title';
    

	//VARIABLES:
	
	/** @var [OBJECT] The viewer object. */
	protected $viewer;
	
    /** @var [STRING] The path to this module's root directory. */
	protected $pathModuleRoot;
	
	/** @var [OBJECT] The object for managing the row we are editing. */
	protected $dataManager;
	
	/** @var [STRING] HREF destination of page to receive form data. */
	protected $formAction;
	
	/** @var [ARRAY] Array of fields we are editing on the form. */
	protected $formFields;
	
	/** @var [ARRAY] Array of field values for the row we are editing. */
	protected $formValues;
	
	/** @var [ARRAY] Array of field value errors for the row we are editing. */
	protected $formErrors;
	
	
	//CLASS CONSTRUCTOR
	//************************************************************************
	/**
	 * function __construct
	 * <pre>
	 * Initialize the object.
	 * </pre>
	 * @param $pathModuleRoot [STRING] The path to the module's root dir.
	 * @param $viewer [OBJECT] The viewer object.
	 * @param $formAction [STRING] href of the page to receive form data.
	 * @return [void]
	 */
    function __construct($pathModuleRoot, $viewer, $formAction ) 
    {
        // save the passed in parameters
        $this->pathModuleRoot = $pathModuleRoot;
        $this->viewer = $viewer;
        $this->formAction = $formAction;
        
        // now get array of fields we want to work with
        $this->formFields = explode( ',', page_SeriesAdd::FORM_FIELDS);
        
        // create a RowManager initialized with the requested row
        $this->dataManager = new RowManager_SeriesManager();
        
        $this->formValues = $this->dataManager->getArrayOfValues();

        // mark errors as empty.
        $this->formErrors = array();
        
    }



	//CLASS FUNCTIONS:
	//************************************************************************
	/**
	 * function classMethod
	 * <
	 pre>
	 * [classFunction Description]
	 * </pre>
	 * <pre><code>
	 * [Put PseudoCode Here]
	 * </code></pre>
	 * @param $param1 [$param1 type][optional description of $param1]
	 * @param $param2 [$param2 type][optional description of $param2]
	 * @return [returnValue, can be void]
	 */
    function classMethod($param1, $param2) 
    {
        // CODE
    }	    	
    
    
    
    //************************************************************************
	/**
	 * function loadFromForm
	 * <pre>
	 * Loads the data from the submitted form.
	 * </pre>
	 * @return [void]
	 */
    function loadFromForm() 
    {
        // for each form field we want to work with
        for( $indx=0; $indx<count($this->formFields); $indx++) {
            $key = $this->formFields[ $indx ];
            
            // if value is found in form data
            if (isset($_REQUEST[ $key ] ) ) {
                
                // store value in formValues
                $this->formValues[ $key ] = $_REQUEST[ $key ];
                
            } else {
                
                // else store empty value in formValues
                $this->formValues[ $key ] = '';
            }
        }
        
    } // end loadFromForm()
    
    
    
    //************************************************************************
	/**
	 * function isDataValid
	 * <pre>
	 * Verifies the returned data is valid.
	 * </pre>
	 * @return [BOOL]
	 */
    function isDataValid() 
    {
        $isValid = true;
    
         // step through each field
        for ($indx=0; $indx<count( $this->formFields ); $indx++) {
    
            $key = $this->formFields[ $indx ];
            
            // if field is empty then
            if ( $this->formValues[ $key ] == '') {
                
                // mark the error
                $isValid = false;
                $this->formErrors[ $key ] = $key.' can\'t be empty';
            }
            
        } // next field
        
        return $isValid;
        
    }
    
    
    
    //************************************************************************
	/**
	 * function processData
	 * <pre>
	 * Processes the data for this form.
	 * </pre>
	 * @return [void]
	 */
    function processData() 
    {

        $this->dataManager->loadFromArray( $this->formValues );
        $this->dataManager->createNewEntry();
        
    } // end processData()
    
    
    
    //************************************************************************
	/**
	 * function getHTML
	 * <pre>
	 * This method returns the HTML data generated by this object.
	 * </pre>
	 * @return [STRING] HTML Display data.
	 */
    function getHTML() 
    {
    
        // Make a new Template object
        $path = $this->pathModuleRoot.'templates/';
        $this->template = new Template( $path );
        
        
        // store any additional values to template
        $this->template->set( 'formAction', $this->formAction );
        
        // save the list of form fields
        $this->template->set( 'formFields', $this->formFields);
        
        // save the values of the form fields
        $this->template->set( 'formValues', $this->formValues);
        
        // save the errors of the form fields
        $this->template->set( 'formErrors', $this->formErrors);
        
         
        // now load and return the template HTML
		return $this->template->fetch( 'page_SeriesAdd.tpl' );
        
    }
    
    
    
    //************************************************************************
	/**
	 * function setLinks
	 * <pre>
	 * Sets the value of the linkValues array.
	 * </pre>
	 * @param $links [ARRAY] Array of Link Values
	 * @return [void]
	 */
    function setLinks($links) 
    {
        $this->linkValues = $links;
    }
	
}

?>