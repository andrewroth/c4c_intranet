<?php
/**
 * class page_SeasonList 
 * <pre> 
 * Displays the list of Seasons for a given Series in our tvaddicts application
 * </pre>
 * @author Johnny Hausman
 * Date:   11 Feb 2006
 */
class  page_SeasonList {

	//CONSTANTS:
	
	/** The list of fields to be displayed */
    const DISPLAY_FIELDS = 'season_title';
    

	//VARIABLES:
	
	/** @var [OBJECT] The viewer object. */
	protected $viewer;
	
    /** @var [STRING] The path to this module's root directory. */
	protected $pathModuleRoot;
	
	/** @var [OBJECT] The object for generating the data list. */
	protected $listManager;
	
	/** @var [ARRAY] An array of information to use for displaying link Columns. */
	protected $linkColumns;
	
	/** @var [INTEGER] The ID of the series we are Working with. */
	protected $seriesID;
	
	
	//CLASS CONSTRUCTOR
	//************************************************************************
	/**
	 * function __construct
	 * <pre>
	 * Initialize the object.
	 * </pre>
	 * @param $pathModuleRoot [STRING] The path to the module's root dir.
	 * @param $viewer [OBJECT] The viewer object.
	 * @param $sortBy [STRING] Field data to sort listManager by.
	 * @return [void]
	 */
    function __construct($pathModuleRoot, $viewer, $sortBy, $seriesID ) 
    {

        $this->pathModuleRoot = $pathModuleRoot;
        $this->viewer = $viewer;
        
        $this->seriesID = $seriesID;
        
        if ( $sortBy=='' )
        {
            $sortBy ='season_title';
        }
        
        $seasonManager = new RowManager_SeasonManager();
        $seasonManager->setSeriesID( $seriesID );
        $seasonManager->setSortOrder( $sortBy );
        $this->listManager = $seasonManager->getListIterator();
         
    }



	//CLASS FUNCTIONS:
	//************************************************************************
	/**
	 * function classMethod
	 * <
	 pre>
	 * [classFunction Description]
	 * </pre>
	 * <pre><code>
	 * [Put PseudoCode Here]
	 * </code></pre>
	 * @param $param1 [$param1 type][optional description of $param1]
	 * @param $param2 [$param2 type][optional description of $param2]
	 * @return [returnValue, can be void]
	 */
    function classMethod($param1, $param2) 
    {
        // CODE
    }	    
    
    
    
    //************************************************************************
	/**
	 * function getHTML
	 * <pre>
	 * This method returns the HTML data generated by this object.
	 * </pre>
	 * @return [STRING] HTML Display data.
	 */
    function getHTML() 
    {
    
        // Make a new Template object
        $path = $this->pathModuleRoot.'templates/';
        $this->template = new Template( $path );
        
        
        // Store the Name of thie series:
        $seriesManager = new RowManager_SeriesManager( $this->seriesID );
        $this->template->set( 'seriesName', $seriesManager->getTitle() );
        
        
        // store the field names being displayed
        $fieldNames = explode(',', page_SeasonList::DISPLAY_FIELDS);
        $this->template->set( 'dataFieldList', $fieldNames);
        
        
        // store the link values
        // $this->linkValues[ 'view' ] = 'add/new/href/data/here';
        $this->template->set( 'linkValues', $this->linkValues );
        
        
        // store the Link Column information
        $title = 'Episodes';
        $label = "view";
        $link = $this->linkValues[ 'linkEpisode' ];
        $fieldName = 'season_id';
        $this->addLinkColumn($title, $label, $link, $fieldName );
        $this->template->set( 'linkColumns', $this->linkColumns );
        
        
        // store Data to display as an Array
        $this->template->set( 'dataList', $this->listManager->getDataList() );
 
         
        // now load and return the template HTML
		return $this->template->fetch( '07_page_SeasonList.tpl' );
        
    }
    
    
    
    //************************************************************************
	/**
	 * function addLinkColumn
	 * <pre>
	 * Adds a value to the linkColumn array.
	 * </pre>
	 * @param $title [STRING] The label to display for the column title
	 * @param $label [STRING] The label to display for the link
	 * @param $link  [STRING] the href value for the link
	 * @param $fieldName [STRING] the name of the field used to complete 
	 * the link
	 * @return [void]
	 */
    function addLinkColumn($title, $label, $link, $fieldName ) 
    {
        $entry = array();
        $entry[ 'title' ] = $title;
        $entry[ 'label' ] = $label;
        $entry[ 'link' ] = $link;
        $entry[ 'field' ] = $fieldName;
        
        $this->linkColumns[] = $entry;
    }
    
    
    
    //************************************************************************
	/**
	 * function setLinks
	 * <pre>
	 * Sets the value of the linkValues array.
	 * </pre>
	 * @param $links [ARRAY] Array of Link Values
	 * @return [void]
	 */
    function setLinks($links) 
    {
        $this->linkValues = $links;
    }
	
}

?>