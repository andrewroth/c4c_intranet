<?php
/**
 * @package cim_hrdb
 */ 
/**
 * class page_ImportData 
 * <pre> 
 * import data from old intranet
 * </pre>
 * @author CIM Team
 * Date:   30 Mar 2006
 */
 // RAD Tools: Custom Page
class  page_ImportData extends PageDisplay {

	//CONSTANTS:
    
    /** The Multilingual Page Key for labels on this page */
    const MULTILINGUAL_PAGE_KEY = 'page_ImportData';
    

	//VARIABLES:
	
	/** @var [OBJECT] The viewer object. */
	protected $viewer;
	
    /** @var [STRING] The path to this module's root directory. */
	protected $pathModuleRoot;
	



	//CLASS CONSTRUCTOR
	//************************************************************************
	/**
	 * function __construct
	 * <pre>
	 * Initialize the object.
	 * </pre>
	 * @param $pathModuleRoot [STRING] The path to the module's root dir.
	 * @param $viewer [OBJECT] The viewer object.
	 * @return [void]
	 */
    function __construct($pathModuleRoot, $viewer ) 
    {
    
        parent::__construct();
        
        // initialzie the object values
        $this->pathModuleRoot = $pathModuleRoot;
        $this->viewer = $viewer;
        
        // now initialize the labels for this page
        // start by loading the default field labels for this Module
        $languageID = $viewer->getLanguageID();
        $seriesKey = modulecim_hrdb::MULTILINGUAL_SERIES_KEY;
        $pageKey = page_ImportData::MULTILINGUAL_PAGE_KEY;
        $this->labels = new MultilingualManager( $languageID, $seriesKey, $pageKey );

         
    }



	//CLASS FUNCTIONS:
	//************************************************************************
	/**
	 * function classMethod
	 * <pre>
	 * [classFunction Description]
	 * </pre>
	 * <pre><code>
	 * [Put PseudoCode Here]
	 * </code></pre>
	 * @param $param1 [$param1 type][optional description of $param1]
	 * @param $param2 [$param2 type][optional description of $param2]
	 * @return [returnValue, can be void]
	 */
    function classMethod($param1, $param2) 
    {
        // CODE
    }	
    
    
    
    //************************************************************************
	/**
	 * function getHTML
	 * <pre>
	 * This method returns the HTML data generated by this object.
	 * </pre>
	 * @return [STRING] HTML Display data.
	 */
    function getHTML() 
    {
        // did this in three passes, each time commenting out the previous code
        //
        
        // 1. this section imports the userID data from the national_intranet
        
        /* $sql = "select * from (( security_user inner join data_person on security_user.person_id=data_person.id ) inner join data_campus on data_person.campus=data_campus.name);";
        
        $dbOld = new Database_MySQL();
        $dbOld->connectToDB( 'national_intranet', SITE_DB_PATH, SITE_DB_USER, SITE_DB_PWORD );
        
        $dbOld->runSQL($sql);
        
        while ($row = $dbOld->retrieveRow() ) 
        {
            $username = $row['username'];
            $passwd = $row['passwd'];
            $accountGroupID = $row['accountgroup_id'];
            // echo $username . ' '. $passwd . ' '. $accountGroupID . '<br/>';
            
            $viewerManager = new RowManager_ViewerManager();
            $viewerManager->setAccountGroupID( $accountGroupID );
            $viewerManager->setIsActive( true );
            $viewerManager->setLanguageID( 1 );
            $viewerManager->setLastLogin( '0000-00-00' );
            $viewerManager->setPassWordEncrypted( $passwd );
            $viewerManager->setUserID( $username );
            $viewerManager->createNewEntry();      
        } */
        
        // 2. add the new viewers to the 'all' access group (should have done this with the first one
        
        /*require_once( 'modules/site_AccountAdmin/objects_da/ViewerAccessGroupManager.php' );
        $dbNew = new Database_Site();
        $dbNew->connectToDB( SITE_DB_NAME, SITE_DB_PATH, SITE_DB_USER, SITE_DB_PWORD );

        $sql = 'select * from accountadmin_viewer';
        $dbNew->runSQL($sql);
        
        while ( $row = $dbNew->retrieveRow() )
        {    
            $accessGroupManager = new RowManager_ViewerAccessGroupManager();
            $accessGroupManager->setAccessGroupID( 1 );
            $accessGroupManager->setViewerID( $row['viewer_id'] );
            $accessGroupManager->createNewEntry();
        }
        
        // manually afterwards delete duplicate entries for dave, suraj and i
        */
        
        /*
        // 3. do the person, assignment and access tables
        $dbOld = new Database_MySQL();
        $dbOld->connectToDB( 'national_intranet', SITE_DB_PATH, SITE_DB_USER, SITE_DB_PWORD );
        

        
        // query on old db
        $sql = 'select * from ( ( data_person left join data_campus on data_person.campus=data_campus.name ) left join security_user on data_person.id=security_user.person_id )';
        $dbOld->runSQL($sql);
        
        $provArray = array();
        $provArray['ON'] = 1;
        $provArray['BC'] = 3;
        $provArray['Quebec'] = 11;
        $provArray['AB'] = 2;
        $provArray['Ontario'] = 1;
        $provArray['SK'] = 12;
        $provArray['MB'] = 4;
        $provArray['QU'] = 11;
        $provArray['NS'] = 8;
        
        $dbNew = new Database_Site();
        $dbNew->connectToDB( SITE_DB_NAME, SITE_DB_PATH, SITE_DB_USER, SITE_DB_PWORD );
               
        $i = 0;
        $numViewersFound = 0;
        while ( $row = $dbOld->retrieveRow() )
        {
            $i++;
            
            // figure out the gender
            $genderID = 3; // default is unknown
            if ( $row['gender'] == 'Female' )
            {
                $genderID = 2;       
            }
            else if ( $row['gender'] == 'Male' )
            {
                $genderID = 1;
            }
            
            // figure out the province
            $provinceID = 15;  // default is unknown
            if( array_key_exists( $row['province'], $provArray )  )
            {
                $provinceID = $provArray[$row['province']];
            }
            
            // figure out the campus
            $campusID = 69; // default is unknown
            if ( $row['campus_id'] != '' )
            {
                $campusID = $row['campus_id'];
            }
            
            // create the assignment
            // assign them to their default campus as according to the old db
            $assignmentID = $i;
            $insertSql = 'INSERT INTO cim_hrdb_assignment ( assignment_id, person_id, campus_id ) VALUES ( '.$assignmentID.','.$row['id'] .','.$campusID.' ) ';
            echo $insertSql.'<br/>';
            $dbNew->runSQL($insertSql);
            
            // insert the person data
            $personManager = new RowManager_PersonManager();
            $personManager->setValueByFieldName( 'person_id', $row['id'] );
            $personManager->setValueByFieldName( 'person_fname', $row['fname'] );
            $personManager->setValueByFieldName( 'person_lname', $row['lname'] ); 
            $personManager->setValueByFieldName( 'person_phone', $row['phone'] );
            $personManager->setValueByFieldName( 'person_email', $row['email'] );
            $personManager->setValueByFieldName( 'person_addr', $row['addr1'] );
            $personManager->setValueByFieldName( 'person_city', $row['city'] );
            $personManager->setValueByFieldName( 'province_id', $provinceID );
            $personManager->setValueByFieldName( 'person_pc', $row['postal_code'] );
            $personManager->setValueByFieldName( 'gender_id', $genderID );
            $personManager->setValueByFieldName( 'assignment_id', $assignmentID );
            $personManager->createNewEntry( true );
            
            // create an entry in the access table (maps viewers and persons)
            $viewerSQL = 'select * from accountadmin_viewer where viewer_userID="'.$row['username'].'"';
            $dbNew->runSQL($viewerSQL);
            
            if ( $row['username'] != ''  )
            {
                echo 'username['.$row['username'].']<br/>';
                if ( $viewerRow = $dbNew->retrieveRow()  )
                {
                    $viewerID = $viewerRow['viewer_id'];
                }
                else
                {
                    echo 'ERROR - viewer['.$row['username'].'] not found!<br/>';
                }
                $accessSql = 'INSERT INTO cim_hrdb_access ( viewer_id, person_id) VALUES ( '.$viewerID.', '.$row['id'].' )';
                echo $accessSql.'<br/>';
                $dbNew->runSQL($accessSql);
                
                $numViewersFound++;
            } 
            
        } // while
        
        echo 'the value of i ['.$i.']<br/>';
        echo 'the value of numViewersFound ['.$numViewersFound.']<br/>';
        
        */

        // Uncomment the following line if you want to create a template 
        // tailored for this page:
        $path = $this->pathModuleRoot.'templates/';
        // Otherwise use the standard Templates for the site:
        //$path = SITE_PATH_TEMPLATES;
        

        /*
         * Update any label tags ...
         */
        // example:
            // $name = $user->getName();
            // $this->labels->setLabelTag( '[Title]', '[userName]', $name);


        // NOTE:  this parent method prepares the $this->template with the 
        // common Display data.  
        $this->prepareTemplate($path);

        // uncomment this line if you are creating a template for this page
		$templateName = 'page_ImportData.php';
		// otherwise use the generic site template
		//$templateName = '';
		
		return $this->template->fetch( $templateName );
        
    }
	
}

?>