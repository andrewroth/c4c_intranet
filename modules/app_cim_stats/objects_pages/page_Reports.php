<?php
/**
 * @package cim_stats
 */ 
/**
 * class page_Reports 
 * <pre> 
 * See lots of reports on this page.
 * </pre>
 * @author Russ Martin
 * Date:   12 Oct 2006
 */
 // RAD Tools: Custom Page
class  page_Reports extends PageDisplay {

	//CONSTANTS:
    
    /** The Multilingual Page Key for labels on this page */
    const MULTILINGUAL_PAGE_KEY = 'page_Reports';
    

	//VARIABLES:
	
	/** @var [OBJECT] The viewer object. */
	protected $viewer;
	
    /** @var [STRING] The path to this module's root directory. */
	protected $pathModuleRoot;
	



	//CLASS CONSTRUCTOR
	//************************************************************************
	/**
	 * function __construct
	 * <pre>
	 * Initialize the object.
	 * </pre>
	 * @param $pathModuleRoot [STRING] The path to the module's root dir.
	 * @param $viewer [OBJECT] The viewer object.
	 * @return [void]
	 */
    function __construct($pathModuleRoot, $viewer ) 
    {
    
        parent::__construct();
        
        // initialzie the object values
        $this->pathModuleRoot = $pathModuleRoot;
        $this->viewer = $viewer;
        
        // now initialize the labels for this page
        // start by loading the default field labels for this Module
        $languageID = $viewer->getLanguageID();
        $seriesKey = modulecim_stats::MULTILINGUAL_SERIES_KEY;
        $pageKey = page_Reports::MULTILINGUAL_PAGE_KEY;
        $this->labels = new MultilingualManager( $languageID, $seriesKey, $pageKey );

         
    }



	//CLASS FUNCTIONS:
	//************************************************************************
	/**
	 * function classMethod
	 * <pre>
	 * [classFunction Description]
	 * </pre>
	 * <pre><code>
	 * [Put PseudoCode Here]
	 * </code></pre>
	 * @param $param1 [$param1 type][optional description of $param1]
	 * @param $param2 [$param2 type][optional description of $param2]
	 * @return [returnValue, can be void]
	 */
    function classMethod($param1, $param2) 
    {
        // CODE
    }	
    
    
    
    //************************************************************************
	/**
	 * function getHTML
	 * <pre>
	 * This method returns the HTML data generated by this object.
	 * </pre>
	 * @return [STRING] HTML Display data.
	 */
    function getHTML() 
    {

        // Uncomment the following line if you want to create a template 
        // tailored for this page:
        $path = $this->pathModuleRoot.'templates/';
        // Otherwise use the standard Templates for the site:
        //$path = SITE_PATH_TEMPLATES;
        

        /*
         * Update any label tags ...
         */
        // example:
            // $name = $user->getName();
            // $this->labels->setLabelTag( '[Title]', '[userName]', $name);


        // do the join
        
        // campuses    
        $campusManager = new RowManager_CampusManager();
        $campusManager->setSortOrder('campus_desc');
        
        $multiTableManager = new MultiTableManager();
        $multiTableManager->addRowManager($campusManager);
        
        // prcs
        $prcManager = new RowManager_PRCManager();
        $multiTableManager->addRowManager( $prcManager, new JoinPair( $campusManager->getJoinOnCampusID(), $prcManager->getJoinOnCampusID() ) );
        
        // semester
        $semesterManager = new RowManager_SemesterManager();
        // TODO update the semester
        $semesterManager->setSemesterID(1);
        $multiTableManager->addRowManager( $semesterManager, new JoinPair( $prcManager->getJoinOnSemesterID(), $prcManager->getJoinOnSemesterID() ) );
        
        // prc method
        $prcMethodManager = new RowManager_PrcMethodManager();
        $multiTableManager->addRowManager( $prcMethodManager, new JoinPair( $prcManager->getJoinOnPrcMethodID(), $prcMethodManager->getJoinOnPrcMethodID() ) );   
        
        // get ready to make the xml
        $xmlObject = new XMLObject();
        
        // HEADER
        //$reportInfoXMLObject = new XMLObject('PRC_REPORT');        
        //$xmlObject->addXMLObject( $reportInfoXMLObject );
        // END HEADER
        
        // BODY
        $bodyXMLObject = new XMLObject( 'PRC_FOR_SEMESTER' );
        
        // construct the iterator
        $list = new ListIterator( $multiTableManager );
        
        $list->setFirst();
        while( $list->moveNext() )
        {
            $itemXMLObject = $list->getCurrentRowXMLObject( false, 'IndividualPRC' );
        
            // Finally add this row into the bigger picture
            $bodyXMLObject->addXMLObject( $itemXMLObject );
        
        } // multiTableManager->moveNext()
        
        $xmlObject->addXMLObject( $bodyXMLObject );
          
        $xmlDoc = new DOMDocument(); 
        $xmlDoc->loadXML( $xmlObject->getXML(false,'PRCReport') );
        $numBytesWritten = $xmlDoc->save($this->pathModuleRoot.'prcReport.xml');
	    // echo 'Written '.$numBytesWritten.' bytes';
        // save the xml data onto the server
	    // return $xmlDoc->saveXML();
	    
	    
	    // ------- PART 2 --------
	    
	   // WEEKLY STATS
	   $multiTableManager = new MultiTableManager();
	   
	   $weeklyManager = new RowManager_WeeklyReportManager();
	   $multiTableManager->addRowManager($weeklyManager);
        
        $campusManager = new RowManager_CampusManager();
        $campusManager->setSortOrder('campus_desc');
        
        $multiTableManager->addRowManager( $campusManager, new JoinPair( $campusManager->getJoinOnCampusID(), $weeklyManager->getJoinOnCampusID() ) );
        
        $weekManager = new RowManager_WeekManager();
        $multiTableManager->addRowManager( $weekManager, new JoinPair( $weekManager->getJoinOnWeekID(), $weeklyManager->getJoinOnWeekID() ) );
        
        $staffManager = new RowManager_StaffManager();
        $multiTableManager->addRowManager( $staffManager, new JoinPair( $weeklyManager->getJoinOnStaffID(), $staffManager->getJoinOnStaffID() ) );
        
        $personManager = new RowManager_PersonManager();
        $multiTableManager->addRowManager( $personManager, new JoinPair( $personManager->getJoinOnPersonID(), $staffManager->getJoinOnPersonID() ) );  
	   
	   // get ready to make the xml
        $xmlObject = new XMLObject();
        
        // HEADER
        //$reportInfoXMLObject = new XMLObject('PRC_REPORT');        
        //$xmlObject->addXMLObject( $reportInfoXMLObject );
        // END HEADER
        
        // BODY
        $bodyXMLObject = new XMLObject( 'WEEKLY_FOR_SEMESTER' );
        
        // construct the iterator
        $list = new ListIterator( $multiTableManager );
        
        $list->setFirst();
        while( $list->moveNext() )
        {
            $itemXMLObject = $list->getCurrentRowXMLObject( false, 'IndividualWeek' );
        
            // Finally add this row into the bigger picture
            $bodyXMLObject->addXMLObject( $itemXMLObject );
        
        } // multiTableManager->moveNext()
        
        $xmlObject->addXMLObject( $bodyXMLObject );
          
        $xmlDoc = new DOMDocument(); 
        $xmlDoc->loadXML( $xmlObject->getXML(false,'Report') );
        $numBytesWritten = $xmlDoc->save($this->pathModuleRoot.'weeklyReport.xml');
	    // echo 'Written '.$numBytesWritten.' bytes';
        // save the xml data onto the server
	    // return $xmlDoc->saveXML();
	   
	   
	   
	   // ------- PART 3 --------
	   $multiTableManager = new MultiTableManager();
	   
	   $campusStatsManager = new RowManager_MoreStatsManager();
	   $multiTableManager->addRowManager($campusStatsManager);
        
        $campusManager = new RowManager_CampusManager();
        $campusManager->setSortOrder('campus_desc');
        
        $multiTableManager->addRowManager( $campusManager, new JoinPair( $campusManager->getJoinOnCampusID(), $campusStatsManager->getJoinOnCampusID() ) );
        
        $weekManager = new RowManager_WeekManager();
        $multiTableManager->addRowManager( $weekManager, new JoinPair( $campusStatsManager->getJoinOnWeekID(), $weekManager->getJoinOnWeekID() ) );
        
        $expTypeManager = new RowManager_ExposureTypeManager();
        $multiTableManager->addRowManager( $expTypeManager, new JoinPair( $campusStatsManager->getJoinOnExpTypeID(), $expTypeManager->getJoinOnExpTypeID() ) );
        
        
        $count = 0;
        // get ready to make the xml
        $xmlObject = new XMLObject();
        
        // HEADER
        //$reportInfoXMLObject = new XMLObject('PRC_REPORT');        
        //$xmlObject->addXMLObject( $reportInfoXMLObject );
        // END HEADER
        
        // BODY
        $bodyXMLObject = new XMLObject( 'CAMPUS_REPORT' );
        
        // construct the iterator
        $list = new ListIterator( $multiTableManager );
        
        $list->setFirst();
        while( $list->moveNext() )
        {
            $itemXMLObject = $list->getCurrentRowXMLObject( false, 'Activity' );
            $count++;
        
            // Finally add this row into the bigger picture
            $bodyXMLObject->addXMLObject( $itemXMLObject );
        
        } // multiTableManager->moveNext()
        
        echo 'the count is ['.$count.']<br/>';
        $xmlObject->addXMLObject( $bodyXMLObject );
          
        $xmlDoc = new DOMDocument(); 
        $xmlDoc->loadXML( $xmlObject->getXML(false,'Report') );
        $numBytesWritten = $xmlDoc->save($this->pathModuleRoot.'campusReport.xml');
	    // echo 'Written '.$numBytesWritten.' bytes';
        // save the xml data onto the server
	    // return $xmlDoc->saveXML();
        
        // ---------------
        // OK DONE!

        // NOTE:  this parent method prepares the $this->template with the 
        // common Display data.  
        $this->prepareTemplate($path);

        // uncomment this line if you are creating a template for this page
		$templateName = 'page_Reports.php';
		// otherwise use the generic site template
		//$templateName = '';
		
		return $this->template->fetch( $templateName );
        
    }
	
}

?>