<?php
/**
 * @package cim_reg
 */ 
/**
 * class page_ViewEventDetails 
 * <pre> 
 * Used to display detailed information about an event. Read-only page.
 * </pre>
 * @author Russ Martin
 * Date:   28 Jun 2007
 */
 // RAD Tools: DataSingle Page
class  page_ViewEventDetails extends PageDisplay_DisplaySingle {

	//CONSTANTS:
    
    /** The list of fields to be displayed */
    const DISPLAY_FIELDS = 'event_name,event_descBrief,event_descDetail,event_startDate,event_endDate,event_regStart,event_regEnd,event_website,event_deposit,event_contactEmail,event_pricingText';
    
    /** The Multilingual Page Key for labels on this page */
    const MULTILINGUAL_PAGE_KEY = 'page_ViewEventDetails';
    

	//VARIABLES:
	
	/** @var [OBJECT] The viewer object. */
	protected $viewer;
	
    /** @var [STRING] The path to this module's root directory. */
	protected $pathModuleRoot;
	
	/** @var [INTEGER] The initialization value for the itemManager. */
	protected $event_id;



	//CLASS CONSTRUCTOR
	//************************************************************************
	/**
	 * function __construct
	 * <pre>
	 * Initialize the object.
	 * </pre>
	 * @param $pathModuleRoot [STRING] The path to the module's root dir.
	 * @param $viewer [OBJECT] The viewer object.
     * @param $event_id [INTEGER] Initialization value for the itemManager.
	 * @return [void]
	 */
    function __construct($pathModuleRoot, $viewer, $event_id ) 
    {
    
        parent::__construct( page_ViewEventDetails::DISPLAY_FIELDS );
        
        // initialzie the object values
        $this->pathModuleRoot = $pathModuleRoot;
        $this->viewer = $viewer;

        $this->event_id = $event_id;

        
        // create the item Manager to display
        $this->itemManager = new RowManager_EventManager( $event_id );
        
        // now initialize the labels for this page
        // start by loading the default field labels for this Module
        $languageID = $viewer->getLanguageID();
        $seriesKey = modulecim_reg::MULTILINGUAL_SERIES_KEY;
        $pageKey = modulecim_reg::MULTILINGUAL_PAGE_FIELDS;
        $this->labels = new MultilingualManager( $languageID, $seriesKey, $pageKey );
        
        // then load the page specific labels for this page
        $pageKey = page_ViewEventDetails::MULTILINGUAL_PAGE_KEY;
        $this->labels->loadPageLabels( $pageKey );
         
    }



	//CLASS FUNCTIONS:
	//************************************************************************
	/**
	 * function classMethod
	 * <pre>
	 * [classFunction Description]
	 * </pre>
	 * <pre><code>
	 * [Put PseudoCode Here]
	 * </code></pre>
	 * @param $param1 [$param1 type][optional description of $param1]
	 * @param $param2 [$param2 type][optional description of $param2]
	 * @return [returnValue, can be void]
	 */
    function classMethod($param1, $param2) 
    {
        // CODE
    }	
    
    
    
    //************************************************************************
	/**
	 * function getHTML
	 * <pre>
	 * This method returns the HTML data generated by this object.
	 * </pre>
	 * @return [STRING] HTML Display data.
	 */
    function getHTML() 
    {

        // Uncomment the following line if you want to create a template 
        // tailored for this page:
        //$path = $this->pathModuleRoot.'templates/';
        // Otherwise use the standard Templates for the site:
        $path = SITE_PATH_TEMPLATES;
        
        $this->linkLabels[ 'cont' ] = $this->labels->getLabel( '[Continue]');
        

        /*
         * Update any label tags ...
         */
        // example:
            // $name = $user->getName();
            // $this->labels->setLabelTag( '[Title]', '[userName]', $name);


        // NOTE:  this parent method prepares the $this->template with the 
        // common Display data.  
        $this->prepareTemplate($path);
        
        // set fields to be parsed as date-times
        $this->template->set('datetime_event_startDate', '[event_startDate]');
        $this->template->set('datetime_event_endDate', '[event_endDate]');
        $this->template->set('datetime_event_regStart', '[event_regStart]');
        $this->template->set('datetime_event_regEnd', '[event_regEnd]');
        
        // set field to be parsed as textarea
			$this->template->set('textarea_event_descDetail', '[event_descDetail]');
			$this->template->set('textarea_event_pricingText', '[event_pricingText]');

        // uncomment this line if you are creating a template for this page
		//$templateName = 'page_ViewEventDetails.php';
		// otherwise use the generic site template
		$templateName = 'siteDataSingle.php';
		
		return $this->template->fetch( $templateName );
        
    }
	
}

?>