<?php
/**
 * @package cim_reg
 */ 
/**
 * class page_Reg_home 
 * <pre> 
 * Home page of the registration system.
 * </pre>
 * @author Russ Martin
 * Date:   12 Feb 2007
 */
 // RAD Tools: Custom Page
class  page_Reg_home extends PageDisplay {

	//CONSTANTS:
    
    /** The Multilingual Page Key for labels on this page */
    const MULTILINGUAL_PAGE_KEY = 'page_Reg_home';
    

	//VARIABLES:
	
	/** @var [OBJECT] The viewer object. */
	protected $viewer;
	
    /** @var [STRING] The path to this module's root directory. */
	protected $pathModuleRoot;
	
	/** @var [BOOLEAN] Indicates whether the reg. process has just been completed */
	protected $is_in_reg_process;	
	
    /** @var [STRING] The initialization data for the dataManager. */
	protected $reg_id;		

	    /** @var [STRING] The unique identifier of an event linked to registration process. */
	protected $event_id;	
	
	    /** @var [STRING] The unique identifier of a campus linked to registration process. */
	protected $campus_id;		
	
	    /** @var [STRING] The unique identifier of a person linked to registration process. */
	protected $person_id;	
	
	    /** @var [STRING] The unique identifier of a ministry used to filter events list. */
	protected $ministry_id;			
	
	/** @var [BOOLEAN] Indicates whether viewer is admin or not */
	protected $isAdmin;		
	
	/** @var [BOOLEAN] Indicates whether events are being shown or not */
	protected $isShowingEvents;

	//CLASS CONSTRUCTOR
	//************************************************************************
	/**
	 * function __construct
	 * <pre>
	 * Initialize the object.
	 * </pre>
	 * @param $pathModuleRoot [STRING] The path to the module's root dir.
	 * @param $viewer [OBJECT] The viewer object.
	 * @return [void]
	 */
    function __construct($pathModuleRoot, $viewer, $reg_id, $event_id, $person_id, $isInRegProcess = 'FALSE', $ministry_id = '' ) 
    {
    
        parent::__construct();
        
        // initialzie the object values
        $this->pathModuleRoot = $pathModuleRoot;
        $this->viewer = $viewer;
        $this->reg_id = $reg_id;
        $this->event_id = $event_id;
        $this->person_id = $person_id;
        $this->ministry_id = $ministry_id;
        // set campus_id later
        
        $this->is_in_reg_process = $isInRegProcess;
        $this->isShowingEvents = true;
        
        // now initialize the labels for this page
        // start by loading the default field labels for this Module
        $languageID = $viewer->getLanguageID();
        $seriesKey = modulecim_reg::MULTILINGUAL_SERIES_KEY;
        $pageKey = page_Reg_home::MULTILINGUAL_PAGE_KEY;
        $this->labels = new MultilingualManager( $languageID, $seriesKey, $pageKey );

         
    }



	//CLASS FUNCTIONS:
	//************************************************************************
	/**
	 * function classMethod
	 * <pre>
	 * [classFunction Description]
	 * </pre>
	 * <pre><code>
	 * [Put PseudoCode Here]
	 * </code></pre>
	 * @param $param1 [$param1 type][optional description of $param1]
	 * @param $param2 [$param2 type][optional description of $param2]
	 * @return [returnValue, can be void]
	 */
    function classMethod($param1, $param2) 
    {
        // CODE
    }	
    
    
    
    //************************************************************************
	/**
	 * function getHTML
	 * <pre>
	 * This method returns the HTML data generated by this object.
	 * </pre>
	 * @return [STRING] HTML Display data.
	 */
    function getHTML() 
    {

        // Uncomment the following line if you want to create a template 
        // tailored for this page:
        $path = $this->pathModuleRoot.'templates/';
        // Otherwise use the standard Templates for the site:
        //$path = SITE_PATH_TEMPLATES;
        

        /*
         * Update any label tags ...
         */
        // example:
            // $name = $user->getName();
            // $this->labels->setLabelTag( '[Title]', '[userName]', $name);


        // NOTE:  this parent method prepares the $this->template with the 
        // common Display data.  
        $this->prepareTemplate($path);
        
        
        // has viewer just returned from registration process?
		  if ($this->is_in_reg_process == 'TRUE')
		  {
			  $this->template->set( 'regCompleted', $this->is_in_reg_process );
			  
			  $reg_result = $this->setRegistrationStatus();	// uses reg_id from reg process to get status
			  $result_array = explode('|',$reg_result);
			  $reg_status = $result_array[0];
			  $reg_message = $result_array[1];
			  
			  $this->template->set( 'regStatus', $reg_status );
			  
			  // only send e-mail if all pertinent registration info has been stored (including cash/CC event deposit, if applicable)
			  if ($reg_status == RowManager_StatusManager::REGISTERED)
			  {			  
				  if (!defined('IGNORE_EMAILS'))
				  {	  
			  		 $reg_message = $this->sendConfirmationEmail();	// since reg_message = '' if REGISTERED, use for e-mail status message
		  		  }
	  		  }		  	  
		  	  $this->template->set('regMessage', $reg_message);
		  }  

		  $this->template->set('isAdmin', $this->isAdmin);		          
        if ($this->isAdmin == true)
        {
        		$adminLink = $this->linkValues[ 'adminHome' ];
        		$this->template->set('adminLink', $adminLink );
     		}
        
        // send in event table
        $this->template->set('eventTable', $this->generateEventTable() );
        
        // Send notice (if no events showing)
        if ($this->isShowingEvents == false)
        {
	        $notice = "If you don't see any event you may have to associate yourself with a campus<br>by ";
	        $notice .= "going to 'Modules'->'HRDB'->'Edit My Campus Info'.";
	//         $setCampusLink = 
	//         $notice .= "clicking <b><a href=".$setCampusLink.">here</a></b>";
	        
	        
//	        $this->template->set('notice', $notice); 
        }

        // uncomment this line if you are creating a template for this page
		$templateName = 'page_Reg_home.php';
		// otherwise use the generic site template
		//$templateName = '';
		
		return $this->template->fetch( $templateName );
        
    }
    
    // set whether viewer accessing page is an admin
    function isAdmin($is_admin)
    {
	    $this->isAdmin = $is_admin;
    }
    
    // returns html of a table with a listing of all the events
    // a participant could sign-up for
    //
    private function generateEventTable()
    {

         $sortby = "";
         $listPage = new page_HomePageEventList( $this->pathModuleRoot, $this->viewer, $sortby, $this->person_id, $this->ministry_id );
         
         // echo "Inside Reg_Home<pre>".print_r($this->linkValues, true)."</pre>";
         // need to pass along the links to this template
         $listPage->setLinks( $this->linkValues );
         $this->isShowingEvents = $listPage->isShowingEvents();

         $content = $listPage->getHTML();
         
         return $content;
    }
    
    
    // sends registration confirmation e-mail to admin-registrant
    private function sendConfirmationEmail($appendHTML = false)		// NOTE: set to 'true' in the case of event_id = 14 (Winter Conference)
    {
	    // retrieve basic confirmation e-mail info.
	    $INFO_FIELDS_TOTAL = 9;
	    $emailInfo = $this->getConfirmEmailInfo($this->reg_id);
	    
	    $financeGetter = new FinancialTools();
	    
	    // retrieve financial data for inclusion in e-mail
	    $rulesApplied = array();
	    $basePriceForThisGuy = 0;
	    $priceRules = array();
	    $scholarships = array();
	    $cash_paid = 0;
	    $cash_owed = 0;
	    $cc_paid = 0;
	    $cc_owed = 0;
	    
	    $balance_owing = $financeGetter->calcBalanceOwing( $this->reg_id, $rulesApplied, $basePriceForThisGuy, $priceRules, $scholarships, $cash_paid, $cash_owed, $cc_paid, $cc_owed);	  		
	    $eventBasePrice = $this->getEventBasePrice($this->event_id);
	    
	    if (isset($emailInfo)&&(count($emailInfo) == $INFO_FIELDS_TOTAL))
	    {
	    
	// 	    $confirmationLabels = new MultiLingual_Labels( SITE_LABEL_PAGE_GENERAL, SITE_LABEL_SERIES_SITE, TEMPLATE_SIGNUP_CONFIRMATION, $langID );
	       $to = $emailInfo['email'];
	       $subject = $this->labels->getLabel('[Subject]');
	       
	       // HACK for french and eastern WC
	       $headers = '';
	       $htmlBreak = '';
	       $message = '';
	                       
	       // To send HTML mail, the Content-type header must be set
	       if ( $appendHTML == true )
	       {
	           ;
	           $headers .= 'MIME-Version: 1.0' . "\r\n";
	           $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";
	           $htmlBreak = '<br/>';
	           
	           $message .= '<html><body>';	           	           
	       }
	       
	       // Create the message
	
	       $message .= $this->labels->getLabel('[ThankYou]')." ". $emailInfo['event_name'] ."\n" . $htmlBreak;
	       $message .= $this->labels->getLabel('[ConfirmationNumber]').': ' . $emailInfo['confirmNum'] . "\n" . $htmlBreak;
	       $message .= $this->labels->getLabel('[fName]').': ' . $emailInfo['person_fname']. "\n" . $htmlBreak;
	       $message .= $this->labels->getLabel('[lName]').': ' . $emailInfo['person_lname']. "\n" . $htmlBreak;
	       $message .= $this->labels->getLabel('[campus]').': ' . $emailInfo['campus_name']. "\n" . $htmlBreak;
	       
	       $message .= "\n" . $htmlBreak;
	       $message .= "---- ".$this->labels->getLabel('[FinanceInfo]')." ----\n" . $htmlBreak;
	       $message .= "\n" . $htmlBreak;	 
	       
          // event base price
	       $message .= $this->labels->getLabel('[eventBasePrice]')."  ";	             
	       $message .= '$'.$emailInfo['event_basePrice']."\n" . $htmlBreak;          
          
          // first print out the rules the computer has applied
          foreach( $rulesApplied as $key=>$ruleApplied )
          {
              $message .= $ruleApplied['pricerules_desc'] .':  '.$ruleApplied['pricerules_discount']. "\n" . $htmlBreak;   
          }      
          $message .= "\n" . $htmlBreak;    
          
          // Total of above base price + discounts
	       $message .= $this->labels->getLabel('[BasePriceForYou]')."  ";	             
	       $message .= '$'.$basePriceForThisGuy."\n" . $htmlBreak;   
	       $message .= "\n" . $htmlBreak;   
	       
          //  print out the scholarships for the registrant
          if ((isset($scholarships)&&(count($scholarships) > 0)))
          {
          	$message .= $this->labels->getLabel('[ScholarshipsInfo]'). ": \n" . $htmlBreak;
       	 }
          foreach( $scholarships as $key=>$scholarship )
          {
              $message .= '$'.$scholarship['scholarship_amount'] .' from: '.$scholarship['scholarship_sourceDesc']. "\n" . $htmlBreak;   
          }      
          $message .= "\n" . $htmlBreak;   	                
	       
	       // cash and credit card transaction information
	       $message .= $this->labels->getLabel('[cashReceived]')."  ";	             
	       $message .= '$'.$cash_paid."  \t\t";			// "\n" . $htmlBreak;
	       $message .= $this->labels->getLabel('[cashNotReceived]')."  ";	             
	       $message .= '$'.$cash_owed. "\n" . $htmlBreak;
	       $message .= "\n" . $htmlBreak;
	       	       
	       $message .= $this->labels->getLabel('[ccProcessed]')."  ";	             
	       $message .= '$'.$cc_paid."  \t\t";			// "\n" . $htmlBreak;
	       $message .= $this->labels->getLabel('[ccNotProcessed]')."  ";	             
	       $message .= '$'.$cc_owed. "\n" . $htmlBreak;
	       $message .= "\n" . $htmlBreak;
	       
	       $message .= $this->labels->getLabel('[BalanceOwing]')."  ";	 
	       
	       if (substr($balance_owing,0,1)=='-')
	       {
	       	$message .= "-$".substr($balance_owing,1). "\n" . $htmlBreak;	
       	 }
       	 else 
       	 {           	       
	       	$message .= "$".$balance_owing. "\n" . $htmlBreak;	
       	 }	       	   
       	     
	       $message .= "\n" . $htmlBreak;
	       $message .= "---- ".$this->labels->getLabel('[ImpInfo]')." ----\n" . $htmlBreak;
	       $message .= "\n" . $htmlBreak;
	       
	       // event admin specific:  event confirmation text
	       $message .= $emailInfo['confirm_text'];
	
	       $message .= "\n" . $htmlBreak;
	       $message .= "-------------------------------\n" . $htmlBreak;
	       $message .= "\n" . $htmlBreak;
	       $message .= "\n" . $htmlBreak;
	       
	       
	       // check if proper event e-mail address was found, if NOT then use default address
	       $event_email = $emailInfo['event_email'];
         if(!eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", $event_email) )
         {
            // echo "The e-mail was not valid";
            $isValid = false;
				$event_email = page_EditCampusRegistrations::DEFAULT_EMAIL;
         } 	       
	       
	       $message .= $this->labels->getLabel('[footer]'). $event_email . "\n" . $htmlBreak;
	               
	       // add the end tags
	       if ( $appendHTML )
	       {
	           $message .= "</body></html>";
	       }
	       
	       $message = wordwrap($message, 70);
	
	       $headers .= 'From: '.$event_email . "\n" .
				'Reply-To: '.$event_email . "\n" .
				'X-Mailer: PHP/' . phpversion();
				// 'Bcc: '.$emailInfo['adminEmail'] . "\n" .

// 				echo "<BR>HEADERS: ".$headers;								
// 				echo "TO: ".$to;
// 				echo "<br>SUBJECT: ".$subject;
// 				echo "<BR>MESSAGE: ".$message;

			 ini_set('SMTP', EMAIL_SMTP_SERVER);
			 ini_set('smtp_port', EMAIL_SMTP_PORT);
	
	       $success = mail( $to, $subject, $message, $headers  );
	       if ( !$success )
	       {
	           return 'Error Sending Confirmation E-mail!';		// TODO: replace with a label
	       }    	
	       else
	       {
		        return 'Confirmation E-mail Successfully Sent';	// TODO: replace with a label
	        }   
        }
        else	// could not get confirmation info
        {
	        return 'Error Retrieving Confirmation Information: E-mail *Not* Sent!';	// TODO: replace with a label
        }
    }
    
    
     // set confirmation e-mail address and info by retrieving from the database (using registration ID)
     // @return [ARRAY] an array of email, event_name, confirm_text, event_basePrice, confirmNum, person_fname, person_lname, campus_name, and adminEmail
    protected function getConfirmEmailInfo($regID)
     {
	     $infoArray = array();
	     
	     $email = '';
	     $admEmail = '';
	     $confirmNum = '';
	     $person_fname = '';
	     $person_lname = '';
	     $campus_name = '';
	     $event_name = '';
	     $confirm_text = '';
	     
			// determine if parameter has been set
			if (isset($regID))
			{	     
				
				// get admin's e-mail    (COMMENTED OUT BECAUSE ADMIN == REGISTRANT IN THIS CASE)
// 			  $viewers = new RowManager_ViewerManager();
// 			  $viewers->setID($this->viewer->getViewerID());
// 			  $view_person = new RowManager_AccessManager();
// 			  $person = new RowManager_PersonManager();
// 			  
// 			  $viewerInfo = new MultiTableManager();
// 			  $viewerInfo->addRowManager($viewers); 
// 	        $viewerInfo->addRowManager($view_person, new JoinPair( $viewers->getJoinOnViewerID(), $view_person->getJoinOnViewerID()));
// 	        $viewerInfo->addRowManager($person, new JoinPair( $person->getJoinOnPersonID(), $view_person->getJoinOnPersonID()));
// 	        
// 	        $personInfoList = $viewerInfo->getListIterator( );
// 	        $personInfoArray = $personInfoList->getDataList();		
// 	//        echo "<pre>".print_r($personInfoArray,true)."</pre>"; 
// 	          
// 				$person_id = '';
// 	         reset($personInfoArray);
// 	        	foreach(array_keys($personInfoArray) as $k)
// 				{
// 					$record = current($personInfoArray);	
// 					$admEmail = $record['person_email'];	// NOTE: should only be one person per viewer ID (ENFORCE??)
// 					
// 					next($personInfoArray);	
// 				}
// 				
// 				$infoArray['adminEmail'] = $admEmail;
				
				
				// get registration info for in confirmation e-mail (and get registrant's e-mail address)	        	
	        $regs = new RowManager_RegistrationManager();
	        $regs->setRegID($regID);
	        $people = new RowManager_PersonManager();
	        $assign = new RowManager_AssignmentsManager();
	        $campus = new RowManager_CampusManager;
	        $event = new RowManager_EventManager;
	        
	        $personRegs = new MultiTableManager();
	        $personRegs->addRowManager($people);
	        $personRegs->addRowManager($regs, new JoinPair( $regs->getJoinOnPersonID(), $people->getJoinOnPersonID()));
	        $personRegs->addRowManager($assign, new JoinPair ($people->getJoinOnPersonID(), $assign->getJoinOnPersonID()));
	        $personRegs->addRowManager($campus, new JoinPair ($assign->getJoinOnCampusID(), $campus->getJoinOnCampusID()));
	        $personRegs->addRowManager($event, new JoinPair ($regs->getJoinOnEventID(), $event->getJoinOnEventID()));
	        
	        $personList = $personRegs->getListIterator();
	        $personArray = $personList->getDataList();		
// 	        echo "<pre>".print_r($personArray,true)."</pre>"; 
	          
	         reset($personArray);
	        	foreach(array_keys($personArray) as $k)
				{
					$person = current($personArray);	
					$email = $person['person_email'];
					$person_fname = $person['person_fname'];	// NOTE: should only be one person per registration (ENFORCE??)
					$person_lname = $person['person_lname'];
					$campus_name = $person['campus_desc'];
					$confirmNum = $person['registration_confirmNum'];
					$event_name = $person['event_name'];
					$confirm_text = $person['event_emailConfirmText'];	
					$event_basePrice = $person['event_basePrice'];	
					$event_contactEmail = $person['event_contactEmail'];
					
					next($personArray);	
				}
				
				$infoArray['event_email'] = $event_contactEmail;
				$infoArray['email'] = $email;
				$infoArray['person_fname'] = $person_fname;
				$infoArray['person_lname'] = $person_lname;
				$infoArray['campus_name'] = $campus_name;
				$infoArray['confirmNum'] = $confirmNum;
				$infoArray['event_name'] = $event_name;
				$infoArray['confirm_text'] = $confirm_text;
				$infoArray['event_basePrice'] = $event_basePrice;
        } 
        
        return $infoArray;	//$email.','.$event_name.','.$confirmNum.','.$event_basePrice.','.$person_fname.','.$person_lname.','.$campus_desc.';
     } 
    
     // set the registration status of the last offline reg. process based on info currently in database
     // @return [STRING] a CSV string of 'status|status_message'
     protected function setRegistrationStatus()
     {
	     $backup_event_id = -1;
	     $status_message = 'No registration created!';
	     
	     if ((isset($this->reg_id))&&($this->reg_id != ''))
	     {
		     // check cim_hrdb_person to determine if a person has been affiliated with registration
		     $regs = new RowManager_RegistrationManager();
		     $regs->setRegID($this->reg_id);
		     $person = new RowManager_PersonManager();
		     
		     $regCheck = new MultiTableManager();
		     $regCheck->addRowManager($regs);
		     $regCheck->addRowManager($person, new JoinPair($regs->getJoinOnPersonID(), $person->getJoinOnPersonID()));		
		     
		     $regsList = $regCheck->getListIterator();
		     $regsArray = $regsList->getDataList();
		     
		     // variables to be used for later checks
		     $person_id = '';
		     $confirm_num = '';
		     $person_address = '';
		     $person_email = '';
		     $person_city = '';
		     $person_province = '0';
		     $person_pcode = '';
		     $person_phone = '';
		     
		     reset($regsArray);	// should be only one registration status (for 1 reg_id)
		     foreach (array_keys($regsArray) as $k)
		     {
			     $record = current($regsArray);
			     
			     $backup_event_id = $record['event_id'];
			     $person_id = $record['person_id'];
			     $confirm_num = $record['registration_confirmNum'];
			     
			     $person_email = $record['person_email'];
			     $person_address = $record['person_addr'];
			     $person_city = $record['person_city'];
			     $person_province = $record['province_id'];
			     $person_pcode = $record['person_pc'];
			     $person_phone = $record['person_phone'];

			     next($regsArray);
		     }		          
		     
		     // determine whether any person records were found for registration
		     if ((!isset($regsArray))||(count($regsArray)<1))
		     {
			     $this->storeRegStatus($this->reg_id, RowManager_StatusManager::INCOMPLETE);
			     $status_message = 'No person record associated with registration.';	// ASSUMPTION: set reg_id ==> created registration record
			     return RowManager_StatusManager::INCOMPLETE.'|'.$status_message;
		     }
		     else if (isset($regsArray) && (($person_email == '')||($person_address == '')||
		     ($person_city == '')||($person_province == '')||($person_province == '0')||($person_pcode == '')||($person_phone == '')))
		     {
			     $this->storeRegStatus($this->reg_id, RowManager_StatusManager::INCOMPLETE);
			     $status_message = 'Please ensure that you have entered the following data:'
			     .'<br> name, e-mail address, permanent address, city, province, postal code, and phone number.';	
			     return RowManager_StatusManager::INCOMPLETE.'|'.$status_message;
		     }			     
		     
		     // check cim_hrdb_assignment to determine that the person has been assigned to a campus
		     $assign = new RowManager_AssignmentsManager();
		     $assign->setPersonID($person_id);
		     $status = new RowManager_CampusAssignmentStatusManager();
		     
		     $campusAssign = new MultiTableManager();
		     $campusAssign->addRowManager($assign);
		     $campusAssign->addRowManager($status, new JoinPair($assign->getJoinOnStatusID(), $status->getJoinOnStatusID()));
		     
		     $regsList = $campusAssign->getListIterator();
		     $regsArray = $regsList->getDataList();
		     
		     // variables to be used for later checks
		     $assignArray = array();
		     $this->campus_id = '';
		     
		     reset($regsArray);	// should be only one campus assignment status (for now, later maybe not)
		     foreach (array_keys($regsArray) as $k)
		     {
			     $record = current($regsArray);
			     
			     if ($record['assignmentstatus_desc'] != RowManager_AssignmentsManager::UNKNOWN_STATUS)
			     {
				      $this->campus_id = $record['campus_id'];
			     		$assignArray[$this->campus_id] = $record['assignmentstatus_desc'];			     		
		     	  }
			     next($regsArray);
		     }		
		     
		     // determine whether a campus assignment exists for the found person linked to the registration
		     if ((!isset($assignArray))||(count($assignArray)<1))
		     {
			     $this->storeRegStatus($this->reg_id, RowManager_StatusManager::INCOMPLETE);
			     $status_message = "Please ensure that the registrant is assigned to a valid campus and has a valid status.";
			     return RowManager_StatusManager::INCOMPLETE.'|'.$status_message;
		     }
		     		     
		     // check cim_reg_fieldvalues to determine whether field values have been set for the registration
		     $fields = new RowManager_FieldManager();
		     $fields->setEventID($this->event_id);
		     $TRUE = 1;
		     $fields->setIsRequired($TRUE);
		     
		     $fieldsList = $fields->getListIterator();
		     $fieldsArray = $fieldsList->getDataList();

// 		     reset($fieldsArray);	// should be only one campus assignment status (for now, later maybe not)
// 		     foreach (array_keys($fieldsArray) as $k)
// 		     {
// 			     $record = current($fieldsArray);
// 			     
// 			     next($fieldsArray);
// 		     }		     
		     
		     
		     $fieldValues = new RowManager_FieldValueManager();
		     $fieldValues->setRegID($this->reg_id);
		     
		     $valuesList = $fieldValues->getListIterator();
		     $valuesArray = $valuesList->getDataList();

		     
// 		     reset($regsArray);	// should be only one campus assignment status (for now, later maybe not)
// 		     foreach (array_keys($regsArray) as $k)
// 		     {
// 			     $record = current($regsArray);
// 			     
// 			     $assignArray[$record['campus_id'] = $record['assignmentstatus_desc']
// 			     next($regsArray);
// 		     }	

				// ensure that the REQUIRED fields for an event all have a record for the particular registration
				if (count($valuesArray) < count($fieldsArray))
				{     
					$this->storeRegStatus($this->reg_id, RowManager_StatusManager::INCOMPLETE);
					$status_message = 'Some required event-specific field values were NOT set for the registration.';
					return  RowManager_StatusManager::INCOMPLETE.'|'.$status_message;
				}
				
				if ((!isset($this->event_id))||($this->event_id == ''))
				{
					$this->event_id = $backup_event_id;	// should have been set earlier when retrieving reg. data...					
				}
				
				// retrieve event deposit for later use
				$event = new RowManager_EventManager();
				$event->setEventID($this->event_id);
				
		     $eventsList = $event->getListIterator();
		     $eventsArray = $eventsList->getDataList();

		     $event_deposit = -1;
		     $event_basePrice = -1;
		     reset($eventsArray);	// should be only one event per event_id
		     foreach (array_keys($eventsArray) as $k)
		     {
			     $record = current($eventsArray);
			     $event_deposit = $record['event_deposit'];
			     
			     next($eventsArray);
		     }
		     
		     if ($event_deposit == -1)
		     {
			     $this->storeRegStatus($this->reg_id, RowManager_StatusManager::INCOMPLETE);
			     $status_message = 'Invalid event associated with registration.';
					return  RowManager_StatusManager::INCOMPLETE.'|'.$status_message;
			  }			     					
		     
		     
		     // check cim_reg_cashtransaction and cim_reg_cctransaction tables to determine if event deposit has been paid
		     $ccTransaction = new RowManager_CreditCardTransactionManager();
		     $ccTransaction->setRegID($this->reg_id);
		     
		     $ccTransList = $ccTransaction->getListIterator();
		     $ccTransArray = $ccTransList->getDataList();

		     $ccAmount = 0;
		     reset($ccTransArray);	
		     foreach (array_keys($ccTransArray) as $k)
		     {
			     $record = current($ccTransArray);
			     $ccAmount += $record['cctransaction_amount'];
			     
			     next($ccTransArray);
		     }		
		     
		     // check cash
		     $cashTransaction = new RowManager_CashTransactionManager();
		     $cashTransaction->setRegID($this->reg_id);
		     
		     $cashTransList = $cashTransaction->getListIterator();
		     $cashTransArray = $cashTransList->getDataList();

		     $cashAmount = 0;
		     reset($cashTransArray);
		     foreach (array_keys($cashTransArray) as $k)
		     {
			     $record = current($cashTransArray);
			     $cashAmount += $record['cashtransaction_amtPaid'];
			     
			     next($cashTransArray);
		     }		
		     
		     // check scholarship
		     $scholarship = new RowManager_ScholarshipAssignmentManager();
		     $scholarship->setRegID($this->reg_id);
		     
		     $scholarshipList = $scholarship->getListIterator();
		     $scholarshipArray = $scholarshipList->getDataList();

		     $scholarshipAmount = 0;
		     reset($scholarshipArray);
		     foreach (array_keys($scholarshipArray) as $k)
		     {
			     $record = current($scholarshipArray);
			     $scholarshipAmount += $record['scholarship_amount'];
			     
			     next($scholarshipArray);
		     }			     
		     
		     if ($ccAmount+$cashAmount+$scholarshipAmount < $event_deposit)
		     {
			     $this->storeRegStatus($this->reg_id, RowManager_StatusManager::INCOMPLETE);
			     $status_message = 'The event deposit of $'.$event_deposit.' has not been paid.';
					return  RowManager_StatusManager::INCOMPLETE.'|'.$status_message;
			  }				         	     
		     
		     // check that confirmation # exists and is in proper format (check that format is 'E<event_id>R<reg_id>C<campus_id>')
		     $anyNum = '[0-9]+';	// allow any number for campus ID because person may have been assigned new campuses
		     $pattern = '(E'.$this->event_id.'R'.$this->reg_id.'C'.$anyNum.')';
		     if ((!isset($confirm_num))||(preg_match($pattern, $confirm_num) < 1))	// enter loop if something wrong with confirm #
		     {
			     // if campus-id missing from confirm. # then
			     // search for campus-id, since user may have created new campus assignment during process
				  $pattern = '(E'.$this->event_id.'R'.$this->reg_id.'C)';
				  if (preg_match($pattern, $confirm_num) >= 1)
				  {					  
					  $campusAssigned = new RowManager_AssignmentsManager();
					  $campusAssigned->setPersonID($person_id);
					  
					  $assignmentsList = $campusAssigned->getListIterator();
					  $assignmentsArray = $assignmentsList->getDataList();
					  
					  $assignment = current($assignmentsArray);
					  $campusID = $assignment['campus_id'];	// retrieve latest campus_id assigned to registrant
					  
					  // update confirmation # in database for the proper registration
					   $updateArray = array();
						$updateArray[ 'registration_id' ] = $this->reg_id;
						$updateArray[ 'registration_confirmNum' ] = $confirm_num.$campusID;	// append the new campus_ID
				         
			         $regsManager = new RowManager_RegistrationManager($this->reg_id);
			         $regsManager->loadFromArray( $updateArray );
			         $regsManager->updateDBTable();							  
				  }
				  else 
				  {			     
			     
				     $this->storeRegStatus($this->reg_id, RowManager_StatusManager::INCOMPLETE);
				     $status_message = 'The confirmation number has not been properly set.';
						return  RowManager_StatusManager::INCOMPLETE.'|'.$status_message;
					}
			  }

			  
// 			  $status = new RowManager_StatusManager();
// 			  $status->setStatusDesc(RowManager_StatusManager::REGISTERED);
// 			  
// 		     $statusList = $status->getListIterator();
// 		     $statusArray = $statusList->getDataList();

// 		     $status_id = -1;
// 		     reset($statusArray);		// should be only 1 record for a particular status description
// 		     foreach (array_keys($statusArray) as $k)
// 		     {
// 			     $record = current($statusArray);
// 			     $status_id = $record['status_id'];
// 			     
// 			     next($statusArray);
// 		     }	
// 		     		
// 		     if ($status_id == -1)
// 		     {
// 			     $status_message = 'The registration status could not be properly set to REGISTERED.';
// 					return  RowManager_StatusManager::INCOMPLETE.'|'.$status_message;
// 			  }
// 			  			  
// 			  $updateValues = array();
// 			  $updateValues['registration_id'] = $this->reg_id;    
// 			  $updateValues['registration_status'] = $status_id;	// mark registration as being REGISTERED
//         
//             // Store values in RegistrationManager object
//             $regs->loadFromArray( $updateValues );
// //              echo "<pre>".print_r($this->formValues ,true)."</pre>";          
//             
//             // update information
//              $regs->updateDBTable();     

				 $success = $this->storeRegStatus($this->reg_id, RowManager_StatusManager::REGISTERED);
				 if ($success == false)
				 {
 		     		$status_message = 'The registration status could not be properly set to REGISTERED.';
 					return  RowManager_StatusManager::INCOMPLETE.'|'.$status_message;	
				 }
				 else
				 {				 		     
             	$status_message = '';
		       	return  RowManager_StatusManager::REGISTERED.'|'.$status_message;
	       	 }
	     }
	     else	// use default message if no registration ID was found
	     {
		     return RowManager_StatusManager::UNASSIGNED.'|'.$status_message;
	     }
     }
     
     // Update registration status in database
     // Pre-condition: $this->reg_id must initialized to a valid ID
     //
     // @param [STRING] a constant indicating the current status of the registration
     //							i.e. RowManager_StatusManager::REGISTERED
     // @return [BOOLEAN] whether or not the operation was a success
     protected function storeRegStatus($regID='', $reg_status)
     {
	     $success = true;
	     
	     if ($regID != '')
	     {
		     $regs = new RowManager_RegistrationManager();
			  $regs->setRegID($this->reg_id);
	     
			  $status = new RowManager_StatusManager();
			  $status->setStatusDesc($reg_status);
			  
		     $statusList = $status->getListIterator();
		     $statusArray = $statusList->getDataList();
	
		     $status_id = -1;
		     reset($statusArray);		// should be only 1 record for a particular status description
		     foreach (array_keys($statusArray) as $k)
		     {
			     $record = current($statusArray);
			     $status_id = $record['status_id'];
			     
			     next($statusArray);
		     }	
		     		
		     if ($status_id == -1)
		     {
					$success = false;
					return $sucess;
			  }
			  			  
			  $updateValues = array();
			  $updateValues['registration_id'] = $this->reg_id;    
			  $updateValues['registration_status'] = $status_id;	// mark registration as being REGISTERED
	     
	         // Store values in RegistrationManager object
	         $regs->loadFromArray( $updateValues );
	//              echo "<pre>".print_r($this->formValues ,true)."</pre>";          
	         
	         // update information
	          $regs->updateDBTable();  
	          
	          return $success;
          }
          else
          {
	          $success = false;
          }
     }
     
              
     // retrieve base price for event
     // PRECONDITION: $eventID has been initialized as some non-negative valid event ID
     protected function getEventBasePrice($eventID)
     {
	     $event = new RowManager_EventManager();
	     $event->setEventID($eventID);
	     
	     $eventList = $event->getListIterator();
	     $eventArray = $eventList->getDataList();
	     
	     $eventBasePrice = 0;
	     reset($eventArray);
	     foreach (array_keys($eventArray) as $k) 
	     {
		     $record = current($eventArray);
		     $eventBasePrice = $record['event_basePrice'];	// should be only 1 base price for 1 event_id
		     next($eventArray);
	     }
	     
	     return $eventBasePrice;
     }
    
	
}

?>
